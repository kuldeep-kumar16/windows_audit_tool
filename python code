import subprocess
import datetime
from docx import Document
import os

# ----------------- Utility -----------------
def run_command(command, shell=False):
    """
    Run a system command and return output as string.
    """
    try:
        result = subprocess.run(command, capture_output=True, text=True, shell=shell, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return f"Command failed: {str(e)}"
    except Exception as e:
        return f"Error: {str(e)}"

# ----------------- Information Gathering -----------------
def get_system_info():
    """
    Basic System Information (Name, Model, OS, Version).
    """
    try:
        result = run_command(["systeminfo"], shell=True)
        lines = result.splitlines()
        keys = {
            "Host Name": "System Name",
            "System Model": "Model",
            "OS Name": "OS",
            "OS Version": "Version"
        }
        info = {}
        for line in lines:
            for key in keys:
                if line.startswith(key):
                    info[keys[key]] = line.split(":", 1)[1].strip()
        if not info:
            return {"Error": "No system information retrieved"}
        return info
    except Exception as e:
        return {"Error": f"Failed to get system info: {str(e)}"}

def list_usb_devices():
    """
    List of currently connected USB devices.
    """
    try:
        command = 'Get-PnpDevice -PresentOnly | Where-Object { $_.InstanceId -like "USB*" } | Select-Object -ExpandProperty FriendlyName'
        result = run_command(["powershell", "-Command", command], shell=False)
        lines = [line.strip() for line in result.splitlines() if line.strip()]
        return lines[2:] if len(lines) > 2 else ["No USB devices detected"]
    except Exception as e:
        return [f"Error detecting USB devices: {str(e)}"]

def is_custom_folder_shared():
    """
    Detect if any custom shared folders exist.
    """
    try:
        output = run_command(["net", "share"], shell=False)
        custom = []
        for line in output.splitlines():
            line = line.strip()
            if not line or line.startswith(("Share", "-", "The command")):
                continue
            parts = line.split(None, 2)
            if len(parts) >= 2:
                share_name = parts[0]
                if not share_name.endswith('$'):  # custom share
                    custom.append(share_name)
        return custom if custom else ["No custom shares found"]
    except Exception as e:
        return [f"Error checking shares: {str(e)}"]

# ----------------- Security Checks -----------------
def get_bitlocker_status():
    """
    Check BitLocker disk encryption status for all drives.
    """
    try:
        drives = run_command(["wmic", "logicaldisk", "get", "caption"]).splitlines()[1:]
        status = []
        for drive in drives:
            drive = drive.strip()
            if drive:
                output = run_command(["manage-bde", "-status", drive], shell=False)
                if "Percentage Encrypted: 100%" in output and "Protection Status: Protection On" in output:
                    status.append(f" {drive} Encryption: Enabled (BitLocker Active)")
                elif "Protection Status: Protection Off" in output:
                    status.append(f" {drive} Encryption: Disabled (BitLocker Installed but OFF)")
                elif "BitLocker Version" in output:
                    status.append(f" {drive} Encryption: BitLocker Available but Not Configured")
                else:
                    status.append(f" {drive} Encryption: Not Supported / Not Found")
        return status if status else [" No BitLocker-enabled drives found"]
    except Exception as e:
        return [f"Error checking BitLocker: {str(e)}"]

def get_windows_update_status():
    """
    Check if Windows Update service is running and get last update date.
    """
    try:
        command = (
            'powershell "(Get-Service wuauserv -ErrorAction SilentlyContinue).Status; '
            '(Get-HotFix | Sort-Object InstalledOn -Descending | Select-Object -First 1 -ErrorAction SilentlyContinue).InstalledOn"'
        )
        output = run_command(["powershell", "-Command", command], shell=False).splitlines()
        service_status = output[0].strip() if output else "Stopped"
        last_update_date = output[1].strip() if len(output) > 1 and output[1] else "No updates found"
        
        if service_status == "Running":
            return [f" Windows Update: Enabled (Last Update: {last_update_date})"]
        elif service_status:
            return [f" Windows Update: Disabled (Service Status: {service_status}, Last Update: {last_update_date})"]
        else:
            return [" Windows Update: Service not found or inaccessible"]
    except Exception as e:
        return [f"Error checking Windows Update: {str(e)}"]

def get_firewall_status():
    """
    Windows Firewall status for all profiles (parsed for clarity).
    """
    try:
        output = run_command(["netsh", "advfirewall", "show", "allprofiles"], shell=False)
        lines = [line.strip() for line in output.splitlines() if "Profile" in line or "State" in line]
        return lines if lines else [" Firewall status not available"]
    except Exception as e:
        return [f"Error checking firewall: {str(e)}"]

def get_running_services(limit=10):
    """
    List of running services (limited to 10).
    """
    try:
        output = run_command(["sc", "query", "type=", "service", "state=", "active"], shell=False)
        lines = output.splitlines()
        running_services = []
        service_name = None
        for line in lines:
            line = line.strip()
            if line.startswith("SERVICE_NAME:"):
                service_name = line.split(":", 1)[1].strip()
            elif line.startswith("STATE") and "RUNNING" in line and service_name:
                running_services.append(service_name)
                service_name = None  # Reset for next
        return running_services[:limit], len(running_services)
    except Exception as e:
        return [f"Error listing services: {str(e)}"], 0

def get_open_ports(limit=10):
    """
    List of listening ports (limited to 10).
    """
    try:
        output = run_command(["netstat", "-ano", "|", "findstr", "LISTENING"], shell=True)
        listening = [line[:100] for line in output.splitlines()[:limit]]  # Truncate long lines
        return listening, len(output.splitlines())
    except Exception as e:
        return [f"Error listing ports: {str(e)}"], 0

# ----------------- Report Generator -----------------
def generate_word_report():
    """
    Generate a structured Word (DOCX) report.
    """
    try:
        doc = Document()
        doc.add_heading("Windows Security & Network Report", level=0)
        doc.add_paragraph(f"Generated On: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        doc.add_paragraph("=" * 60)

        # System Info
        doc.add_heading("Basic System Information", level=1)
        sys_info = get_system_info()
        for k, v in sys_info.items():
            doc.add_paragraph(f"{k}: {v}")

        # USB Devices
        doc.add_heading("Connected USB Devices", level=1)
        for usb in list_usb_devices():
            doc.add_paragraph(str(usb))  # Ensure string to avoid TypeError

        # Shared Folders
        doc.add_heading("Custom Shared Folders", level=1)
        for share in is_custom_folder_shared():
            doc.add_paragraph(str(share))

        # Disk Encryption
        doc.add_heading("Disk Encryption Status", level=1)
        for line in get_bitlocker_status():
            doc.add_paragraph(str(line))

        # Windows Update
        doc.add_heading("Windows Update Status", level=1)
        for line in get_windows_update_status():
            doc.add_paragraph(str(line))

        # Running Services
        doc.add_heading("Running Services (Top 10)", level=1)
        services, total_services = get_running_services()
        for s in services:
            doc.add_paragraph(str(s))
        doc.add_paragraph(f"... Total Running: {total_services}")

        # Firewall
        doc.add_heading("Firewall Status", level=1)
        for line in get_firewall_status():
            doc.add_paragraph(str(line))

        # Open Ports
        doc.add_heading("Open Ports (Top 10)", level=1)
        ports, total_ports = get_open_ports()
        for p in ports:
            doc.add_paragraph(str(p))
        doc.add_paragraph(f"... Total Listening: {total_ports}")

        # Save report
        filename = f"security_report_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
        full_path = os.path.abspath(filename)
        doc.save(filename)
        return full_path
    except Exception as e:
        print(f"Error generating report: {str(e)}")
        return None

# ----------------- Sequence Run -----------------
filename = generate_word_report()
if filename:
    print(f"\nReport successfully saved as {filename}")
else:
    print("\nFailed to generate report. Check errors above.")
